/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serverForm;

import util.DriverConstants;
import db.DBBroker;
import db.DBResources;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import validatorGUI.ValidatorGUI;

/**
 *
 * @author Ivan
 */
public class FDBConnect extends javax.swing.JDialog {

    /**
     * Creates new form JDialogDBConnectionDetails
     */
    public FDBConnect(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateComboDrivers();
        prepareForTest();
        centerForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlblPort = new javax.swing.JLabel();
        jlblPassword = new javax.swing.JLabel();
        jpswPassword = new javax.swing.JPasswordField();
        jbtnTestConnection = new javax.swing.JButton();
        jlblPortError = new javax.swing.JLabel();
        jbtnWrite = new javax.swing.JButton();
        jlblIPAddressError = new javax.swing.JLabel();
        jbtnCancel = new javax.swing.JButton();
        jlblUsernameError = new javax.swing.JLabel();
        jlblIPAddress = new javax.swing.JLabel();
        jlblPasswordError = new javax.swing.JLabel();
        jlblDatabase = new javax.swing.JLabel();
        jlblDriver = new javax.swing.JLabel();
        jtxtIPAddress = new javax.swing.JTextField();
        jcmbDatabase = new javax.swing.JComboBox<>();
        jlblUsername = new javax.swing.JLabel();
        jtxtPort = new javax.swing.JTextField();
        jtxtUsername = new javax.swing.JTextField();
        jComboDriver = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Database connection details");

        jlblPort.setText("Port:");

        jlblPassword.setText("Password:");

        jpswPassword.setText("Balonjekeva37");
        jpswPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpswPasswordActionPerformed(evt);
            }
        });

        jbtnTestConnection.setText("Test Connection");
        jbtnTestConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnTestConnectionActionPerformed(evt);
            }
        });

        jlblPortError.setForeground(new java.awt.Color(255, 0, 0));
        jlblPortError.setText("jLabel1");

        jbtnWrite.setText("Write to File");
        jbtnWrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnWriteActionPerformed(evt);
            }
        });

        jlblIPAddressError.setForeground(new java.awt.Color(255, 0, 0));
        jlblIPAddressError.setText("jLabel1");

        jbtnCancel.setText("Cancel");
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        jlblUsernameError.setForeground(new java.awt.Color(255, 0, 0));
        jlblUsernameError.setText("jLabel1");

        jlblIPAddress.setText("IP Address:");

        jlblPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        jlblPasswordError.setText("jLabel1");

        jlblDatabase.setText("Database:");

        jlblDriver.setText("Driver:");

        jtxtIPAddress.setText("127.0.0.1");
        jtxtIPAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtIPAddressFocusLost(evt);
            }
        });

        jlblUsername.setText("Username:");

        jtxtPort.setText("3306");
        jtxtPort.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtPortFocusLost(evt);
            }
        });

        jtxtUsername.setText("root");
        jtxtUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtUsernameFocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlblPasswordError)
                            .addComponent(jlblDatabase)
                            .addComponent(jlblPassword)
                            .addComponent(jlblDriver)
                            .addComponent(jpswPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcmbDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbtnWrite)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnTestConnection)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jtxtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlblUsernameError)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jtxtPort, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jlblPort, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlblPortError, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlblUsername, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlblIPAddressError)
                                    .addComponent(jlblIPAddress)
                                    .addComponent(jtxtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jlblDriver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblPort)
                    .addComponent(jlblIPAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblPortError)
                    .addComponent(jlblIPAddressError))
                .addGap(7, 7, 7)
                .addComponent(jlblUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtxtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlblUsernameError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlblPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpswPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jlblPasswordError)
                .addGap(11, 11, 11)
                .addComponent(jlblDatabase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcmbDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnWrite)
                    .addComponent(jbtnTestConnection)
                    .addComponent(jbtnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jpswPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpswPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jpswPasswordActionPerformed

    private void jbtnTestConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnTestConnectionActionPerformed
        String url = "jdbc:" + jComboDriver.getSelectedItem().toString() + "://" + jtxtIPAddress.getText().trim() + ":" + jtxtPort.getText().trim() + "/";
        Connection connection = null;
        try {
            connection = DriverManager.getConnection(url, jtxtUsername.getText().trim(), new String(jpswPassword.getPassword()));
            JOptionPane.showMessageDialog(null, "Test successful!");
            List<String> dbNames = new DBBroker().getDatabases(connection);
            jcmbDatabase.removeAllItems();
            for (String dbName : dbNames) {
                jcmbDatabase.addItem(dbName);
            }
            prepareForWriting();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to establish connection!");
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ex) {
                    connection = null;
                }
            }
        }
    }//GEN-LAST:event_jbtnTestConnectionActionPerformed

    private void jbtnWriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnWriteActionPerformed
        String url = "jdbc:" + jComboDriver.getSelectedItem().toString() + "://" + jtxtIPAddress.getText().trim() + ":" + jtxtPort.getText().trim() + "/" + jcmbDatabase.getSelectedItem().toString();
        try {
            DBBroker.getInstance().getResources().writeToFile(url, jtxtUsername.getText().trim(), new String(jpswPassword.getPassword()));
            FServer fserver = new FServer();
            dispose();
            fserver.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error writing to file!");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbtnWriteActionPerformed

    private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jbtnCancelActionPerformed

    private void jtxtIPAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtIPAddressFocusLost
        boolean match = ValidatorGUI.getInstance().validateIPAddress(jtxtIPAddress.getText().trim());
        if (!match) {
            jlblIPAddressError.setText("Invalid IP address input");
        } else {
            jlblIPAddressError.setText("");
        }
    }//GEN-LAST:event_jtxtIPAddressFocusLost

    private void jtxtPortFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtPortFocusLost
        boolean match = ValidatorGUI.getInstance().validatePort(jtxtPort.getText().trim());
        if (!match) {
            jlblPortError.setText("Invalid port input");
        } else {
            jlblPortError.setText("");
        }
    }//GEN-LAST:event_jtxtPortFocusLost

    private void jtxtUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtUsernameFocusLost
        boolean match = ValidatorGUI.getInstance().validateAlphaNumeric(jtxtUsername.getText().trim());
        if (!match) {
            jlblUsernameError.setText("Invalid username input");
        } else {
            jlblUsernameError.setText("");
        }
    }//GEN-LAST:event_jtxtUsernameFocusLost

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<DriverConstants> jComboDriver;
    private javax.swing.JButton jbtnCancel;
    private javax.swing.JButton jbtnTestConnection;
    private javax.swing.JButton jbtnWrite;
    private javax.swing.JComboBox<String> jcmbDatabase;
    private javax.swing.JLabel jlblDatabase;
    private javax.swing.JLabel jlblDriver;
    private javax.swing.JLabel jlblIPAddress;
    private javax.swing.JLabel jlblIPAddressError;
    private javax.swing.JLabel jlblPassword;
    private javax.swing.JLabel jlblPasswordError;
    private javax.swing.JLabel jlblPort;
    private javax.swing.JLabel jlblPortError;
    private javax.swing.JLabel jlblUsername;
    private javax.swing.JLabel jlblUsernameError;
    private javax.swing.JPasswordField jpswPassword;
    private javax.swing.JTextField jtxtIPAddress;
    private javax.swing.JTextField jtxtPort;
    private javax.swing.JTextField jtxtUsername;
    // End of variables declaration//GEN-END:variables

//    private void writeToDBResources() {
//        try {
//            PrintWriter pw = new PrintWriter("./resources/database.config.txt");
//            pw.close();
//
//            String urlPattern = "^jdbc:[a-zA-Z]+://"
//                    + "([a-z]+|([1-9]?\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.([1-9]?\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.([1-9]?\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.([1-9]?\\d|1\\d\\d|2[0-4]\\d|25[0-5]))"
//                    + ":[1-9][0-9]{1,3}/[a-zA-Z0-9_]+$";
//            
//           
//           if(!jtxtURL.getText().trim().matches(urlPattern)){
//               JOptionPane.showMessageDialog(this, "Invalid database url!");
//               return ;
//           }
//           
//
//            FileOutputStream outStream = new FileOutputStream("./resources/database.config.txt");
//            String url = "url = " + jtxtURL.getText().trim() + "\n";
//            String username = "username = " + jtxtUsername.getText().trim() + "\n";
//            String password = "password = " + jtxtPassword.getText().trim();
//
//            String input = url + username + password;
//
//            outStream.write(input.getBytes());
//            outStream.flush();
//            outStream.close();
//
//            JOptionPane.showMessageDialog(this, "Successfully set DB configuration!");
//
//        } catch (FileNotFoundException ex) {
//            System.out.println(ex.getMessage());
//            ex.printStackTrace();
//        } catch (IOException ex) {
//            System.out.println(ex.getMessage());
//            ex.printStackTrace();
//        }
//    }
    private void centerForm() {
        setLocationRelativeTo(null);
    }

    private void populateComboDrivers() {
        jComboDriver.removeAllItems();
        for (DriverConstants driver : DriverConstants.values()) {
            jComboDriver.addItem(driver);
        }
    }

    private void prepareForTest() {
        jlblIPAddressError.setText("");
        jlblPortError.setText("");
        jlblUsernameError.setText("");
        jlblPasswordError.setText("");
        jcmbDatabase.setEnabled(false);
        jbtnWrite.setEnabled(false);
    }

    private void prepareForWriting() {
        jcmbDatabase.setEnabled(true);
        jbtnWrite.setEnabled(true);
    }
}
