/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import domain.Client;
import domain.Professor;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import logic.Controller;
import tableModels.ClientTableModel;

/**
 *
 * @author Ivan
 */
public class FClient extends javax.swing.JDialog {

    /**
     * Creates new form FClient
     */
    public FClient(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateClientTableModel();
        prepareForSort();
        enableUpdateDeleteButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtxtClientCountry = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jtxtClientEmail = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jbtnInsertClient = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jbtnUpdateClient = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jbtnDeleteClient = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jDateChooserClientDateOfBirth = new com.toedter.calendar.JDateChooser();
        jtxtClientID = new javax.swing.JTextField();
        jtxtClientName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblClients = new javax.swing.JTable();
        jtxtClientSurname = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtxtNameSearchClient = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Client form");

        jLabel1.setText("ID:");

        jLabel2.setText("Name:");

        jbtnInsertClient.setText("INSERT");
        jbtnInsertClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnInsertClientActionPerformed(evt);
            }
        });

        jLabel3.setText("Surname:");

        jbtnUpdateClient.setText("UPDATE");
        jbtnUpdateClient.setEnabled(false);
        jbtnUpdateClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpdateClientActionPerformed(evt);
            }
        });

        jLabel4.setText("Date of birth:");

        jbtnDeleteClient.setText("DELETE");
        jbtnDeleteClient.setEnabled(false);
        jbtnDeleteClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteClientActionPerformed(evt);
            }
        });

        jLabel5.setText("Country:");

        jLabel6.setText("E-mail:");

        jDateChooserClientDateOfBirth.setDateFormatString("yyyy-MM-dd");

        jtxtClientID.setEnabled(false);

        jtblClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtblClients);

        jLabel7.setText("Search clients:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(31, 31, 31)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jbtnInsertClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(67, 67, 67)
                        .addComponent(jbtnUpdateClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(81, 81, 81)
                        .addComponent(jbtnDeleteClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(164, 164, 164))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtxtClientCountry, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooserClientDateOfBirth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtxtClientSurname, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtClientName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtClientID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtClientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtxtNameSearchClient, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtxtClientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(jtxtNameSearchClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jtxtClientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jtxtClientSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(4, 4, 4))
                            .addComponent(jDateChooserClientDateOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jtxtClientCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jtxtClientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnInsertClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnUpdateClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnDeleteClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnInsertClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnInsertClientActionPerformed
        if (validateAllFields()) {
            // Uzimanje vrednosti svakog polja nakon validacije
            String name = jtxtClientName.getText().trim();
            String surname = jtxtClientSurname.getText().trim();
            Date dateOfBirth = jDateChooserClientDateOfBirth.getDate();
            String country = jtxtClientCountry.getText().trim();
            String email = jtxtClientEmail.getText().trim();
            // Kreiranje profesora od odgovarajucih polja, bez ID-a
            Client clientToInsert = new Client(name, surname, country, dateOfBirth, email);
            // Kreiranje novog profesora da bi mogao da se lako izvuce iz baze, zbog izmena u tabeli
            Client insertedClient = Controller.getInstance().insertClient(clientToInsert);
            JOptionPane.showMessageDialog(this,
                    "Successful insertion of client! Assigned ID: "
                    + insertedClient.getClientID());
            ClientTableModel ctm = (ClientTableModel) jtblClients.getModel();
            ctm.addRow(insertedClient);
            clearTextFields();
            //                return;
        } else {
            return;
        }
    }//GEN-LAST:event_jbtnInsertClientActionPerformed

    private void jbtnUpdateClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpdateClientActionPerformed
        if (validateAllFields()) {
            // Kreiranje profesora od polja, i update-ovanje u bazi
            int clientId = Integer.parseInt(jtxtClientID.getText());
            String name = jtxtClientName.getText().trim();
            String surname = jtxtClientSurname.getText().trim();
            Date dateOfBirth = jDateChooserClientDateOfBirth.getDate();
            String country = jtxtClientCountry.getText().trim();
            String email = jtxtClientEmail.getText().trim();
            Client clientToUpdate = new Client(clientId, name, surname, country, dateOfBirth, email);
            // Sam poziv update-a
            Client updatedClient = Controller.getInstance().updateClient(clientToUpdate);
            JOptionPane.showMessageDialog(this, "Successful update of professor with ID: "
                    + clientToUpdate.getClientID());
            // Ispravljanje u tabeli
            int selectedRow = jtblClients.getSelectedRow();
            ClientTableModel ctm = (ClientTableModel) jtblClients.getModel();
            ctm.updateRow(selectedRow, updatedClient);
            // Resetovanje elemenata forme
            resetAllInputFields();
            jbtnDeleteClient.setEnabled(false);
            jbtnUpdateClient.setEnabled(false);
            jbtnInsertClient.setEnabled(true);
        }
    }//GEN-LAST:event_jbtnUpdateClientActionPerformed

    private void jbtnDeleteClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteClientActionPerformed
        // Uzimanje ID-a i brisanje profesora iz baze
        int clientId = Integer.parseInt(jtxtClientID.getText());
        Controller.getInstance().deleteClientByID(clientId);
        JOptionPane.showMessageDialog(this, "Successful deletion of professor with ID: " + clientId);
        // Brisanje iz tabele
        ClientTableModel ctm = (ClientTableModel) jtblClients.getModel();
        int selectedRow = jtblClients.getSelectedRow();
        ctm.removeRow(selectedRow);
        // Resetovanje elemenata forme
        resetAllInputFields();
        jbtnDeleteClient.setEnabled(false);
        jbtnUpdateClient.setEnabled(false);
        jbtnInsertClient.setEnabled(true);
    }//GEN-LAST:event_jbtnDeleteClientActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser jDateChooserClientDateOfBirth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDeleteClient;
    private javax.swing.JButton jbtnInsertClient;
    private javax.swing.JButton jbtnUpdateClient;
    private javax.swing.JTable jtblClients;
    private javax.swing.JTextField jtxtClientCountry;
    private javax.swing.JTextField jtxtClientEmail;
    private javax.swing.JTextField jtxtClientID;
    private javax.swing.JTextField jtxtClientName;
    private javax.swing.JTextField jtxtClientSurname;
    private javax.swing.JTextField jtxtNameSearchClient;
    // End of variables declaration//GEN-END:variables

    private void populateClientTableModel() {
        List<Client> allClients = Controller.getInstance().getAllClients();
        ClientTableModel ctm = new ClientTableModel(allClients);
        jtblClients.setModel(ctm);
    }

    public void enableUpdateDeleteButtons() {
//        ListSelectionModel model = =jtblClients.getSelectionModel();
        ListSelectionModel model = jtblClients.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!model.isSelectionEmpty()) {
                    // Enable-ovanje update-a i delete-a kada je izabran neki od klijenata
                    jbtnDeleteClient.setEnabled(true);
                    jbtnUpdateClient.setEnabled(true);
                    jbtnInsertClient.setEnabled(false);

                    // Nalazenje izabranog profesora
                    int index = jtblClients.getSelectedRow();
                    int clientID = (int) jtblClients.getValueAt(index, 0);
                    // Izvlacenje profesora iz baze i popunjavanje polja sa podacima izabranog profesora
                    Client client = Controller.getInstance().getClientByID(clientID);
                    jtxtClientID.setText(client.getClientID() + "");
                    jtxtClientName.setText(client.getName());
                    jtxtClientSurname.setText(client.getSurname());
                    jDateChooserClientDateOfBirth.setDate(client.getDateOfBirth());
                    jtxtClientCountry.setText(client.getCountry());
                    jtxtClientEmail.setText(client.getEmail());
                }
            }
        });
    }

    private boolean validateAllFields() {
        if (jtxtClientName.getText() == null || jtxtClientName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert name!");
            return false;
        }
        if (jtxtClientSurname.getText() == null || jtxtClientSurname.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert surname!");
            return false;
        }
        if (jtxtClientCountry.getText() == null || jtxtClientCountry.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert insutrment!");
            return false;
        }
        if (jtxtClientEmail.getText() == null || jtxtClientEmail.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert e-mail!");
            return false;
        }
        if (jDateChooserClientDateOfBirth.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please choose date!");
            return false;
        }
        return true;
    }

    private void resetAllInputFields() {
        jtxtClientID.setText(null);
        jtxtClientName.setText(null);
        jtxtClientSurname.setText(null);
        jDateChooserClientDateOfBirth.setDate(null);
        jtxtClientCountry.setText(null);
        jtxtClientEmail.setText(null);
    }

    private void clearTextFields() {
        jtxtClientID.setText(null);
        jtxtClientName.setText(null);
        jtxtClientSurname.setText(null);
        jtxtClientEmail.setText(null);
        jtxtClientCountry.setText(null);
        jDateChooserClientDateOfBirth.setDate(null);
    }

    private void prepareForSort() {
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(jtblClients.getModel());
        jtblClients.setRowSorter(rowSorter);

        jtxtNameSearchClient.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                String filterPurchase = jtxtNameSearchClient.getText();
                if (filterPurchase.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + filterPurchase));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                String text = jtxtNameSearchClient.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }
}
