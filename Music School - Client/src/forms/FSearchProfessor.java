/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import domain.Professor;
import enums.FormMode;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import logic.Controller;
import session.Session;
import tableModels.ProfessorTableModel;

/**
 *
 * @author Ivan
 */
public class FSearchProfessor extends javax.swing.JDialog {

    /**
     * Creates new form jdSearchProfessor
     */
    public FSearchProfessor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateProfessorTableMyModel();
        setColumns();
        prepareForSort();
        enableViewButton();
    }

    public FSearchProfessor(java.awt.Frame parent, boolean modal, FormMode mode) {
        super(parent, modal);
        initComponents();
        populateProfessorTableMyModel();
        setColumns();
        prepareForSort();
        setFormMode(mode);
        if (mode.equals(FormMode.VIEW)) {
            enableViewButton();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnViewProfessor = new javax.swing.JButton();
        jbtnSelectProfessor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblProfessors = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jtxtNameSearchProfessor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Professor search");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jbtnViewProfessor.setText("View");
        jbtnViewProfessor.setEnabled(false);
        jbtnViewProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnViewProfessorActionPerformed(evt);
            }
        });

        jbtnSelectProfessor.setText("Select");
        jbtnSelectProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSelectProfessorActionPerformed(evt);
            }
        });

        jtblProfessors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Professor ID", "Name", "Surname", "Date of birth", "Instrument", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblProfessors.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(jtblProfessors);

        jLabel1.setText("Search:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtNameSearchProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jbtnViewProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127)
                        .addComponent(jbtnSelectProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtNameSearchProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnViewProfessor)
                    .addComponent(jbtnSelectProfessor))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnViewProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnViewProfessorActionPerformed
        int selectedCompany = jtblProfessors.getSelectedRow();
        if (selectedCompany > -1) {
            //            int profId = (int) jtblProfessors.getValueAt(selectedCompany, 0);
            JOptionPane.showMessageDialog(null, "Selected professor with ID: " + jtblProfessors.getValueAt(selectedCompany, 0));
//            JDialog updateOrDeleteCompany = new jdCreateUpdateDeleteProfessor(null, true, (int) jtblProfessors.getValueAt(selectedCompany, 0), FormMode.UPDATE);
//            updateOrDeleteCompany.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a professor!");
        }
    }//GEN-LAST:event_jbtnViewProfessorActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void jbtnSelectProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSelectProfessorActionPerformed
        try {
            int selectedRow = jtblProfessors.getSelectedRow();
            if (selectedRow > -1) {
                int profId = (int) jtblProfessors.getValueAt(selectedRow, 0);
                Professor professor = Controller.getInstance().getProfessorByID(profId);
                Session.getInstance().getMap().put("selected_prof", professor);
                JOptionPane.showMessageDialog(null, "Selected professor with ID: " + profId);
                this.dispose();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_jbtnSelectProfessorActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (Session.getInstance().getMap().containsKey("deleted_prof")) {
            Professor prof = (Professor) Session.getInstance().getMap().get("deleted_prof");
            System.out.println(prof.toString());
            ProfessorTableModel ptm = (ProfessorTableModel) jtblProfessors.getModel();
            ptm.removeRow(prof);
            Session.getInstance().getMap().remove("deleted_prof");
        }
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnSelectProfessor;
    private javax.swing.JButton jbtnViewProfessor;
    private javax.swing.JTable jtblProfessors;
    private javax.swing.JTextField jtxtNameSearchProfessor;
    // End of variables declaration//GEN-END:variables

    // Ukoliko ne kreiramo nas model moramo ovako puniti tabele
    public void populateProfessorTable() {
        List<Professor> professors = Controller.getInstance().getAllProfessors();

        TableModel tableModel = jtblProfessors.getModel();
        DefaultTableModel defaultTableModel = (DefaultTableModel) tableModel;

        for (Professor professor : professors) {
            Object[] newRow = new Object[6];
            newRow[0] = professor.getProfessorID();
            newRow[1] = professor.getName();
            newRow[2] = professor.getSurname();
            newRow[3] = professor.getDateOfBirth();
            newRow[4] = professor.getInstrument();
            newRow[5] = professor.getEmail();
            defaultTableModel.addRow(newRow);
        }
    }

    public void populateProfessorTableMyModel() {
        List<Professor> profs = Controller.getInstance().getAllProfessors();
        ProfessorTableModel ptm = new ProfessorTableModel(profs);
        jtblProfessors.setModel(ptm);
    }

    public void setColumns() {
        jtblProfessors.setAutoResizeMode(jtblProfessors.AUTO_RESIZE_ALL_COLUMNS);
        TableColumn col = jtblProfessors.getColumnModel().getColumn(0);
        col.setPreferredWidth(100);
        col = jtblProfessors.getColumnModel().getColumn(3);
        col.setPreferredWidth(120);
        col = jtblProfessors.getColumnModel().getColumn(4);
        col.setPreferredWidth(100);
        col = jtblProfessors.getColumnModel().getColumn(5);
        col.setPreferredWidth(120);
    }

    public void enableViewButton() {
        ListSelectionModel model = jtblProfessors.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!model.isSelectionEmpty()) {
                    jbtnViewProfessor.setEnabled(true);
                    int index = jtblProfessors.getSelectedRow();
                    int profId = (int) jtblProfessors.getValueAt(index, 0);
                    try {
                        Professor prof = Controller.getInstance().getProfessorByID(profId);
                    } catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                        ex.printStackTrace();
                    }
                }
            }
        });
    }

    public void setFormMode(FormMode mode) {
        switch (mode) {
            case VIEW:
                jbtnSelectProfessor.setEnabled(false);
                jbtnSelectProfessor.setVisible(false);
                return;
            case SELECT:
                jbtnViewProfessor.setEnabled(false);
                jbtnViewProfessor.setVisible(false);
                return;
            default:
                return;
        }
    }

    private void prepareForSort() {
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(jtblProfessors.getModel());
        jtblProfessors.setRowSorter(rowSorter);

        jtxtNameSearchProfessor.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                String filterPurchase = jtxtNameSearchProfessor.getText();
                if (filterPurchase.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + filterPurchase));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                String text = jtxtNameSearchProfessor.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }
}
